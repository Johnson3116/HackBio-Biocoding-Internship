#Task Code 2.7: Public Health

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats

# Load dataset from the URL
url = 'https://raw.githubusercontent.com/HackBio-Internship/public_datasets/main/R/nhanes.csv'
df = pd.read_csv(url)

# Display the first few rows of the dataset to understand its structure
df.head()

# Step 1: Replacing all NA values with 0
df = df.fillna(0)

print(df)

# Step 2: Create a new column for Weight in pounds
df['Weight_Pounds'] = df['Weight'] * 2.2
# Set up subplots
plt.figure(figsize=(12, 10))

# Plot histograms
plt.subplot(2, 2, 1)
sns.histplot(df['BMI'], kde=True, color='skyblue')
plt.title('Distribution of BMI')

plt.subplot(2, 2, 2)
sns.histplot(df['Weight'], kde=True, color='green')
plt.title('Distribution of Weight')

plt.subplot(2, 2, 3)
sns.histplot(df['Weight_Pounds'], kde=True, color='orange')
plt.title('Distribution of Weight in Pounds')

plt.subplot(2, 2, 4)
sns.histplot(df['Age'], kde=True, color='purple')
plt.title('Distribution of Age')

# Show plots
plt.tight_layout()
plt.show()

# Step 3: Calculate the mean of the 60-second pulse rate
mean_pulse_rate = df['Pulse'].mean()
print(f"Mean of the 60-second pulse rate: {mean_pulse_rate}") #Answer: Mean of the 60-second pulse rate: 63.06

# Step 4: Calculate the range of diastolic blood pressure
min_diastolic_bp = df['BPDia'].min()
max_diastolic_bp = df['BPDia'].max()
print(f"Range of the diastolic blood pressure: {min_diastolic_bp} - {max_diastolic_bp}") #Answer: Range of the diastolic blood pressure: 0.0 - 116.0

# Step 5: Variance and standard deviation for income
income_variance = df['Income'].var()
income_std_dev = df['Income'].std()
print(f"Variance of Income: {income_variance}")
print(f"Standard Deviation of Income: {income_std_dev}") 
#Answer: Variance of Income: 1264147753.5507102
#Standard Deviation of Income: 35554.85555519401

# Step 6: Visualizing the relationship between Weight and Height colored by different categories
plt.figure(figsize=(12, 10))

# Gender as color
plt.subplot(2, 2, 1)
sns.scatterplot(data=df, x='Height', y='Weight', hue='Gender')
plt.title('Weight vs Height by Gender')

# Diabetes as color
plt.subplot(2, 2, 2)
sns.scatterplot(data=df, x='Height', y='Weight', hue='Diabetes')
plt.title('Weight vs Height by Diabetes')

# Smoking Status as color
plt.subplot(2, 2, 3)
sns.scatterplot(data=df, x='Height', y='Weight', hue='SmokingStatus')
plt.title('Weight vs Height by SmokingStatus')

plt.tight_layout()
plt.show()
#Above is good when code is run

# T-test for Age and Gender
grouped_age = df.groupby('Gender')['Age'].mean()
t_stat, p_value = stats.ttest_ind(df[df['Gender'] == 'Male']['Age'], df[df['Gender'] == 'Female']['Age'])
if p_value =< 0.05:
print(f"there is a relationship between Age and Gender")
else
print(f"there is no relationship between Age and Gender")

# T-test for BMI and Diabetes
t_stat_bmi, p_value_bmi = stats.ttest_ind(df[df['Diabetes'] == 1]['BMI'], df[df['Diabetes'] == 0]['BMI'])
t_stat_bmi, p_value_bmi

# T-test for Alcohol Year and Relationship Status
t_stat_alcohol, p_value_alcohol = stats.ttest_ind(df[df['Relationship_Status'] == 'Married']['Alcohol_Year'], df[df['Relationship_Status'] == 'Single']['Alcohol_Year'])
t_stat_alcohol, p_value_alcohol

