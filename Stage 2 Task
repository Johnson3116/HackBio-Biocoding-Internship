#Task Code 2.7: Public Health

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats

# Step 1: Load the dataset
url = 'https://raw.githubusercontent.com/HackBio-Internship/public_datasets/main/R/nhanes.csv'
df = pd.read_csv(url)

# Step 2: Handle missing values (NA)
# Option 1: Fill missing values with 0
data_filled = data.fillna(0)
print(data_filled)

# Step 3: Create a new column for Weight in pounds
df['Weight_Pounds'] = df['Weight'] * 2.2

# Set up subplots
plt.figure(figsize=(12, 10))

# Plot histograms
plt.subplot(2, 2, 1)
sns.histplot(df['BMI'], kde=True, color='skyblue')
plt.title('Distribution of BMI')

plt.subplot(2, 2, 2)
sns.histplot(df['Weight'], kde=True, color='green')
plt.title('Distribution of Weight')

plt.subplot(2, 2, 3)
sns.histplot(df['Weight_Pounds'], kde=True, color='orange')
plt.title('Distribution of Weight in Pounds')

plt.subplot(2, 2, 4)
sns.histplot(df['Age'], kde=True, color='purple')
plt.title('Distribution of Age')

# Show plots
plt.tight_layout()
plt.show()

# Step 4: # Calculate the mean of the 60-second pulse rate
mean_pulse_rate = df['Pulse'].mean()
print(f"mean of the 60-second pulse rate: {mean_pulse_rate}") #Answer: 63.06
#Above is good when code is run

# Range of Diastolic Blood Pressure
min_diastolic = df['DBP'].min()
max_diastolic = df['DBP'].max()
print(f"Range of Diastolic Blood Pressure: {min_diastolic}-{max_diastolic}")

# Variance and standard deviation for income
income_variance = df['Income'].var()
income_std_dev = df['Income'].std()
print(f"Variance of Income: {income_variance}")
print(f"Standard Deviation of Income: {income_std_dev}")

# Visualizing the relationship between Weight and Height colored by different categories
plt.figure(figsize=(10, 6))

# Gender as color
plt.subplot(2, 2, 1)
sns.scatterplot(data=df, x='Height', y='Weight', hue='Gender')
plt.title('Weight vs Height by Gender')

# Diabetes as color
plt.subplot(2, 2, 2)
sns.scatterplot(data=df, x='Height', y='Weight', hue='Diabetes')
plt.title('Weight vs Height by Diabetes')

# Smoking Status as color
plt.subplot(2, 2, 3)
sns.scatterplot(data=df, x='Height', y='Weight', hue='Smoking_Status')
plt.title('Weight vs Height by Smoking Status')

plt.tight_layout()
plt.show()

# T-test for Age and Gender
grouped_age = df.groupby('Gender')['Age'].mean()
t_stat, p_value = stats.ttest_ind(df[df['Gender'] == 'Male']['Age'], df[df['Gender'] == 'Female']['Age'])
t_stat, p_value

# T-test for BMI and Diabetes
t_stat_bmi, p_value_bmi = stats.ttest_ind(df[df['Diabetes'] == 1]['BMI'], df[df['Diabetes'] == 0]['BMI'])
t_stat_bmi, p_value_bmi

# T-test for Alcohol Year and Relationship Status
t_stat_alcohol, p_value_alcohol = stats.ttest_ind(df[df['Relationship_Status'] == 'Married']['Alcohol_Year'], df[df['Relationship_Status'] == 'Single']['Alcohol_Year'])
t_stat_alcohol, p_value_alcohol

